class Solution {
public:
  void dfs(int src,vector<bool>&visited,vector<vector<int>>&adj){
    visited[src]=true;
    for(auto i:adj[src]){
        if(! visited[i]){
            dfs(i,visited,adj);
        }
    }

  }
    int findCircleNum(vector<vector<int>>& isConnected) {
        //creating adj matrix
        int size=isConnected.size();
        vector<vector<int>>adj(size+1);
        for(int i=0;i<size;i++){
            for(int j=0;j<size;j++){
                if(i!=j && isConnected[i][j]!=0){
                    adj[i+1].push_back(j+1);
                }
            }

        }
        int cnt=0;
        vector<bool>visited(size+1,false);
        for(int i=1;i<=size;i++){
            if(!visited[i]){
                dfs(i,visited,adj);
                cnt++;
            }
        }
        return cnt;
    }
};
